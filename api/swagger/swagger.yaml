swagger: '2.0'
info: {version: 0.0.1, title: Movies/TV API}
host: localhost:10010
basePath: /v1
schemes: [https, http]
paths:
  /swagger: {x-swagger-pipe: swagger_raw}
  /movie/{movieID}/getCrewInfo:
    x-swagger-router-controller: getCrewInfoById
    get:
      summary: GET CREW MEMBER INFO BY MOVIE ID
      tags: [Movies]
      produces: [application/json]
      operationId: fetchCrewInfoById
      parameters:
      - {in: path, name: movieID, type: string, required: true, description: ID of
          the featured movie}
      - {in: query, name: role, type: string, required: true, description: 'Crew member''s
          role. eg - ''directors'', ''producers'', ''writers'''}
      responses:
        '200':
          description: Crew Members Details
          schema: {$ref: '#/definitions/CrewMembersDetail'}
        '404':
          description: A movie with the specified ID was not found!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
  /movie/{movieID}:
    x-swagger-router-controller: getMovieById
    get:
      summary: GET MOVIE DETAILS BY ID
      tags: [Movies]
      produces: [application/json]
      operationId: fetchMovieById
      parameters:
      - {in: path, name: movieID, type: string, required: true, description: ID of
          the featured movie to get}
      responses:
        '200':
          description: Movie Details
          schema: {$ref: '#/definitions/MovieDetailsByID'}
        '404':
          description: A movie with the specified ID was not found!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
  /movie/{movieID}/getMovieDoc:
    x-swagger-router-controller: getMovieDocById
    get:
      summary: GET MOVIE DOCS BY ID
      tags: [Movies]
      produces: [application/json]
      operationId: fetchMovieDocById
      parameters:
      - {in: path, name: movieID, type: string, required: true, description: ID of
          the featured movie whose doc(s) has to be fetched}
      - {in: query, name: type, type: string, required: true, description: Type of
          Movie Doc to be fetched.}
      responses:
        '200':
          description: Movie Docs
          schema: {$ref: '#/definitions/MovieDocByID'}
        '404':
          description: A movie with the specified ID was not found!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
  /movie/list/{genre}:
    x-swagger-router-controller: getMovieListByGenre
    get:
      summary: GET A LIST OF MOVIES BY GENRE
      tags: [Movies]
      produces: [application/json]
      operationId: fetchMovieListByGenre
      parameters:
      - {in: path, name: genre, type: string, required: true, description: Genre of
          the movie. eg - Action}
      - {in: query, name: page, type: integer, required: false, description: Page
          number. Default is 1}
      - {in: query, name: count, type: integer, required: false, description: Number
          of records to return in a page. Default is 10}
      responses:
        '200':
          description: Movies list for a specified genre
          schema: {$ref: '#/definitions/MovieListByGenre'}
        '404':
          description: Movies for specified genre was not found!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
  /movie/{movieID}/getMoviePoster:
    x-swagger-router-controller: getMoviePosterById
    get:
      summary: GET MOVIE POSTER BY MOVIE ID (WRAPPER AROUND TMDB)
      tags: [Movies]
      produces: [application/json]
      operationId: fetchMoviePosterById
      parameters:
      - {in: path, name: movieID, type: string, required: true, description: ID of
          the featured movie whose poster has to be fetched}
      - {in: query, name: device, type: string, required: true, description: Type
          of device for which poster has to be fetched (desktop/mobile)}
      responses:
        '200':
          description: Movie Poster Image URL
          schema: {$ref: '#/definitions/Poster'}
        '404':
          description: Cannot find any poster for specified movie!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
  /movie/{movieID}/getTopBilledCast:
    x-swagger-router-controller: getTopBilledCastById
    get:
      summary: GET TOP BILLED CAST BY MOVIE ID
      tags: [Movies]
      produces: [application/json]
      operationId: fetchTopBilledCastById
      parameters:
      - {in: path, name: movieID, type: string, required: true, description: ID of
          the featured movie whose top billed cast has to be fetched}
      responses:
        '200':
          description: Top 5 Billed Cast
          schema: {$ref: '#/definitions/TopBilledCast'}
        '404':
          description: A movie with the specified ID was not found!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
  /search/{type}:
    x-swagger-router-controller: search
    get:
      summary: GET A LIST OF MOVIES WHICH MATCH SEARCH STRING
      tags: [Search]
      produces: [application/json]
      operationId: search
      parameters:
      - {in: path, name: type, type: string, required: true, description: Valid values
          are - 'movie' for searching Movies & 'tv' for TV Series}
      - {in: query, name: name, type: string, required: true, description: Name of
          the Movie/TV Series}
      - {in: query, name: limit, type: integer, required: false, description: Number
          of records to return for a search operation. Default is 10}
      responses:
        '200':
          description: Movies list for a specified genre
          schema: {$ref: '#/definitions/MovieList'}
        '404':
          description: Movies for specified genre was not found!
          schema: {$ref: '#/definitions/Error'}
        '429':
          description: Too many requests!
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error occured!
          schema: {$ref: '#/definitions/Error'}
definitions:
  CrewMembersDetail:
    type: array
    items:
      type: object
      properties:
        ContribName: {type: string}
        ContribRoleDetail: {type: string}
  Error:
    type: object
    properties:
      message: {type: string, description: Error description in detail}
  MovieDetailsByID:
    type: object
    required: [_id, MovieID, SeriesType, Genres, RunningTime]
    properties:
      _id: {type: string}
      MovieID: {type: string}
      SeriesID: {type: string}
      SeriesType: {type: string}
      SeriesEndYear: {type: string}
      ReleaseYear: {type: integer}
      AltTitles:
        type: array
        items: {type: string}
      Business:
        type: object
        properties:
          Budget: {type: string}
          BudgetCurrency: {type: string}
          HighGBO: {type: string}
          HighGBOCountry: {type: string}
          HighGBOCurrency: {type: string}
      Parental:
        type: object
        properties:
          Certificates:
            type: array
            items: {type: string}
      Technical:
        type: object
        properties:
          Colors:
            type: array
            items: {type: string}
          Sounds:
            type: array
            items: {type: string}
      Countries:
        type: array
        items: {type: string}
      Genres:
        type: array
        items: {type: string}
      Keywords:
        type: array
        items: {type: string}
      Languages:
        type: array
        items: {type: string}
      Locations:
        type: array
        items: {type: string}
      Rating:
        type: object
        properties:
          RatingDist: {type: string}
          Rating: {type: string}
          RatingVotes: {type: integer}
      RunningTime: {type: string}
  MovieDocByID:
    type: array
    items:
      type: object
      properties:
        DocText: {type: string}
        DocSubtype: {type: string}
        DocAuthor: {type: string}
  MovieList:
    type: array
    items:
      type: object
      properties:
        MovieID: {type: string}
        Rating:
          type: object
          properties:
            Rating: {type: string}
  MovieListByGenre:
    type: object
    properties:
      total: {type: integer}
      results:
        type: array
        items:
          type: object
          properties:
            MovieID: {type: string}
            Rating:
              type: object
              properties:
                Rating: {type: string}
  Poster:
    type: object
    properties:
      image_url: {type: string}
  TopBilledCast:
    type: array
    items:
      type: object
      properties:
        ContribName: {type: string}
        ContribClass: {type: string}
        ContribRole: {type: string}
